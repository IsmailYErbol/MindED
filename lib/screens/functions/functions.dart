import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';

class HelperFunctions {
  Future<List<Map<String, String>>> saveList(
      List<Map<String, String>> newList) async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();

    // Retrieve the existing list, if any
    String existingListJson = prefs.getString('journalList') ?? '[]';
    List<dynamic> existingList = jsonDecode(existingListJson) as List;

    // Convert the existing list to List<Map<String, String>>
    List<Map<String, String>> combinedList = existingList
        .map((item) => Map<String, String>.from(item as Map))
        .toList();

    // Append the new list to the existing list
    combinedList.addAll(newList);

    // Convert the combined list to a JSON string
    String combinedListJson = jsonEncode(combinedList);

    // Save the combined JSON string
    await prefs.setString('journalList', combinedListJson);
    return combinedList;
  }

  Future<List<Map<String, String>>> getList() async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();

    String jsonString = prefs.getString('journalList') ?? '[]';

    List<dynamic> jsonList = jsonDecode(jsonString) as List;
    List<Map<String, String>> myList =
        jsonList.map((item) => Map<String, String>.from(item as Map)).toList();

    return myList;
  }

  String getCurrentDateFormatted() {
    DateTime now = DateTime.now();
    // Specify the format you need
    DateFormat formatter = DateFormat('dd MMM');
    return formatter.format(now);
  }

  Future<String> addDocumentWithAutoIDAndField(
      String collectionName, Map<String, dynamic> data) async {
    try {
      final CollectionReference collection =
          FirebaseFirestore.instance.collection(collectionName);

      DocumentReference documentReference = collection.doc();
      String autoGeneratedID = documentReference.id;

      // Include the auto-generated ID in the data
      data['id'] = autoGeneratedID;

      await documentReference.set(data);

      print(
          'Document added successfully with auto-generated ID and added to data.');
      return autoGeneratedID;
    } catch (e) {
      print('Error adding document: $e');
      return 'false';
    }
  }

  Future<String?> loginUser(String email, String password) async {
    try {
      final QuerySnapshot result = await FirebaseFirestore.instance
          .collection('users')
          .where('login', isEqualTo: email)
          .where('password', isEqualTo: password)
          .limit(1) // Limit to 1 document since it's a login check
          .get();

      if (result.docs.isNotEmpty) {
        final user = result.docs.first;
        return user.id; // Return the user ID if login is successful
      } else {
        return null; // Return null if login credentials are incorrect
      }
    } catch (e) {
      print('Error during login: $e');
      return null; // Return null in case of an error
    }
  }

  Future<bool> doesEmailExist(String email) async {
    try {
      final QuerySnapshot result = await FirebaseFirestore.instance
          .collection('users')
          .where('login', isEqualTo: email)
          .limit(
              1) // Limit to 1 document since you only want to check existence
          .get();

      return result.docs.isNotEmpty; // If any document matches, email exists
    } catch (e) {
      print('Error checking email existence: $e');
      return false; // Return false in case of an error
    }
  }

  String formatTimestamp(Timestamp timestamp) {
    DateTime dateTime = timestamp.toDate();
    DateTime now = DateTime.now();
    Duration difference = now.difference(dateTime);

    if (difference.inMinutes < 1) {
      return 'Just now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes} minutes ago';
    } else if (difference.inDays < 1) {
      return '${difference.inHours} hours ago';
    } else if (difference.inDays == 1) {
      return '1 day ago';
    } else {
      return DateFormat('MMM d, yyyy').format(dateTime);
    }
  }
}
